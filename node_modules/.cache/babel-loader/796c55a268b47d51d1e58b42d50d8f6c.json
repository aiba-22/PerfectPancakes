{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//全体の流れはinit_btnのボタンをクリックした時にカメラの起動が始まり、次に画像解析が始まる\n//全て読み込まれてから要素を取り込む\nwindow.onload = function () {\n  // labelContainer: フロント側に表示する結果を格納する\n  var labelContainer, model; // 焼き加減の数値を格納\n\n  var favorite_baking = document.getElementById(\"favorite_baking\");\n  var favorite_baking = favorite_baking.getAttribute('value'); //ページを読み込む際にlabelContainerの要素を取得する必要がある為、initの前に記載\n\n  var button = document.getElementById(\"init_btn\");\n\n  button.onclick = function () {\n    init();\n  };\n\n  function init() {\n    return _init.apply(this, arguments);\n  }\n\n  function _init() {\n    _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var medias, video, promise, successCallback, errorCallback, URL, modelURL, metadataURL;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              errorCallback = function _errorCallback(err) {\n                alert(err);\n              };\n\n              successCallback = function _successCallback(stream) {\n                video.srcObject = stream;\n              };\n\n              //変数設定\n              //カメラの設定\n              medias = {\n                audio: false,\n                video: {\n                  facingMode: {\n                    exact: \"environment\"\n                  }\n                }\n              }; //DOMに要素追加\n              //カメラ映像を出すvideoタグ\n\n              video = document.getElementById(\"video\"); //ユーザーのカメラを取得する\n\n              promise = navigator.mediaDevices.getUserMedia(medias); //カメラの起動許可をするとコールバックしてvideoタグにカメラ映像を写す\n\n              promise.then(successCallback)[\"catch\"](errorCallback); //コールバックより実行しvideoオブジェクトにカメラ映像を格納する\n\n              ; //起動許可がされない時はアラート表示を行う\n\n              ; //スタートボタンを待ちのボタンに変更を行う\n\n              button.className = \"spinner-border\";\n              button.innerHTML = \"\"; //使い方を非表示にする\n\n              instructions = document.getElementById(\"instructions\");\n              instructions.innerHTML = \"\"; //googleのteachablemachineを使用して画像解析をするのでモデル先のURLを格納\n\n              URL = \"https://teachablemachine.withgoogle.com/models/w_phl0QcW/\"; //teachablemachineのモデルURLを読み込む\n\n              modelURL = URL + \"model.json\";\n              metadataURL = URL + \"metadata.json\"; //モデルのイメージを格納する\n\n              _context.next = 17;\n              return tmImage.load(modelURL, metadataURL);\n\n            case 17:\n              model = _context.sent;\n              //フロント側に表示する結果ラベルをDOMに要素追加する\n              labelContainer = document.getElementById(\"label-container\"); //進捗インジケータを見えなくする\n\n              button.className = \"transparent-img\"; //画像を常に識別し結果を表示するためのループ処理\n\n              window.requestAnimationFrame(loop);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _init.apply(this, arguments);\n  }\n\n  var baking_status = \"not_baked\"; //片面の焼きが完了したら反対側の焼きに移行するので、焼き加減の状態を追えるようにを変数を用意する\n\n  var endTime = 0; // 終了時間\n\n  var startTime = 0; // 開始時間\n\n  var cnt = 0;\n  var interval;\n\n  function loop() {\n    return _loop.apply(this, arguments);\n  } //カメラ画像からgoogleのteachablemachineのモデルより近い画像がどれか判定をしていく\n\n\n  function _loop() {\n    _loop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return predict();\n\n            case 2:\n              if (baking_status == \"baking_completed\") {\n                window.cancelAnimationFrame(loop);\n                first_baking_completed();\n              } else {\n                window.requestAnimationFrame(loop);\n              }\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _loop.apply(this, arguments);\n  }\n\n  function predict() {\n    return _predict.apply(this, arguments);\n  } //反対側の焼きをスタートする為のボタンと新しいパンケーキを焼き直すボタンは必要な時以外は非表示にしておく\n\n\n  function _predict() {\n    _predict = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var canvas, prediction;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              //canvasに静止画を格納する\n              canvas = document.getElementById(\"canvas\");\n              canvas.getContext(\"2d\").drawImage(video, 0, 0, 200, 200);\n              _context3.next = 4;\n              return model.predict(canvas);\n\n            case 4:\n              prediction = _context3.sent;\n              _context3.t0 = true;\n              _context3.next = _context3.t0 === prediction[0].probability.toFixed(2) * favorite_baking >= 0.7 ? 8 : _context3.t0 === prediction[1].probability.toFixed(2) * favorite_baking >= 0.2 ? 12 : _context3.t0 === prediction[1].probability.toFixed(2) * favorite_baking >= 0.05 ? 16 : _context3.t0 === prediction[2].probability.toFixed(2) * favorite_baking > 0.2 ? 19 : _context3.t0 === prediction[3].probability.toFixed(2) * favorite_baking > 0.2 ? 22 : 25;\n              break;\n\n            case 8:\n              labelContainer.className = \"yureru-s\";\n              labelContainer.innerHTML = \"まだまだ\";\n\n              if (baking_status == \"not_baked\") {\n                startTime = performance.now();\n                baking_status = \"start_baking\";\n              }\n\n              return _context3.abrupt(\"break\", 25);\n\n            case 12:\n              labelContainer.className = \"yureru-s\";\n              labelContainer.innerHTML = \"今だ\";\n\n              if (baking_status == \"start_baking\") {\n                endTime = performance.now(); // 終了時間\n                //最初の焼きが完了すると『もう少し』から『今だ』にかかった時間を測定して次のステップに進ませる\n\n                baking_status = \"baking_completed\";\n              }\n\n              return _context3.abrupt(\"break\", 25);\n\n            case 16:\n              labelContainer.className = \"yureru-s\";\n              labelContainer.innerHTML = \"もう少し\";\n              return _context3.abrupt(\"break\", 25);\n\n            case 19:\n              labelContainer.className = \"yureru-s\";\n              labelContainer.innerHTML = \"PerfectPancakes!!\";\n              return _context3.abrupt(\"break\", 25);\n\n            case 22:\n              labelContainer.className = \"yureru-s\";\n              labelContainer.innerHTML = \"パンケーキを映してください\";\n              return _context3.abrupt(\"break\", 25);\n\n            case 25:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _predict.apply(this, arguments);\n  }\n\n  $(function () {\n    $('#second_step_box').hide(); //もう片面の焼きの目安時間のカウントを開始するボタン\n\n    $('#restart').hide(); //新しいパンケーキを作るためにリスタートするボタン\n  }); //次の焼き時間目安を表示させカウントダウンタイマーのボタンを表示させる\n\n  function first_baking_completed() {\n    $(\"#baking_time_result\").text(\"\\u7247\\u9762\\u306E\\u713C\\u304D\\u6642\\u9593\\u306F \".concat(Math.round((endTime - startTime) / 1000), \"\\u79D2\\u3067\\u3057\\u305F\\u3002\\u6B21\\u306E\\u713C\\u304D\\u52A0\\u6E1B\\u76EE\\u5B89\\u306F \").concat(Math.round((endTime - startTime) / 1000 * 0.5), \"\\u79D2\\u3067\\u3059\\u3002\\u30D1\\u30F3\\u30B1\\u30FC\\u30AD\\u3092\\u3072\\u3063\\u304F\\u308A\\u8FD4\\u3057\\u305F\\u3089\\u30B9\\u30BF\\u30FC\\u30C8\\u3092\\u62BC\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\"));\n    $(\"#second_step_box\").show();\n  } //カウントダウンをスタートさせると1秒ごとにcountupを作動させる\n\n\n  $('#second_baking_button').on('click', function () {\n    $('#second_step_box').hide();\n    interval = setInterval(countup, 1000);\n  }); //タイマーを表示させて0になったら終了する\n\n  function countup() {\n    cnt++;\n    labelContainer.innerHTML = \"2\\u56DE\\u76EE\\u306E\\u3072\\u3063\\u304F\\u308A\\u8FD4\\u3057\\u307E\\u3067\\u3042\\u3068\".concat(Math.round((endTime - startTime) / 1000 * 0.5) - cnt, \"\\u79D2\");\n\n    if (Math.round((endTime - startTime) / 1000 * 0.5) - cnt <= 0) {\n      labelContainer.innerHTML = \"今だ\";\n      $('#restart').show(); //タイマーを終了\n\n      clearInterval(interval);\n    }\n  } //ボタンの表示と変数のステータスを最初のスタートを押した状態と同じにする\n\n\n  $('#restart').on('click', function () {\n    $('#restart').hide(); //開始瞬間を一回のみにするためのmesurementをfalseにしておく\n\n    baking_status = \"not_baked\"; //開始時間と終了時間をリセット\n\n    endTime = 0;\n    startTime = 0; //カウントダウン用の変数をリセット\n\n    cnt = 0;\n    window.requestAnimationFrame(loop);\n  });\n};","map":{"version":3,"sources":["/Users/aiba/PerfectPancakes/app/javascript/packs/webcam.js"],"names":["window","onload","labelContainer","model","favorite_baking","document","getElementById","getAttribute","button","onclick","init","successCallback","errorCallback","err","alert","stream","video","srcObject","medias","audio","facingMode","exact","promise","navigator","mediaDevices","getUserMedia","then","className","innerHTML","instructions","URL","modelURL","metadataURL","tmImage","load","requestAnimationFrame","loop","baking_status","endTime","startTime","cnt","interval","predict","cancelAnimationFrame","first_baking_completed","canvas","getContext","drawImage","prediction","probability","toFixed","performance","now","$","hide","text","Math","round","show","on","setInterval","countup","clearInterval"],"mappings":"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","sourcesContent":["//全体の流れはinit_btnのボタンをクリックした時にカメラの起動が始まり、次に画像解析が始まる\n//全て読み込まれてから要素を取り込む\nwindow.onload = function() {\n    // labelContainer: フロント側に表示する結果を格納する\n      let labelContainer, model;\n    // 焼き加減の数値を格納\n      var favorite_baking = document.getElementById(\"favorite_baking\");\n      var favorite_baking = favorite_baking.getAttribute('value');\n    //ページを読み込む際にlabelContainerの要素を取得する必要がある為、initの前に記載\n      var button =document.getElementById(\"init_btn\")\n      button.onclick = function(){\n        init();\n      }\n      async function init() {\n\n    //変数設定\n    //カメラの設定\n      let medias;\n\n        medias = {\n        audio: false,\n        video: {\n            facingMode: {\n            exact: \"environment\"\n            }\n        }\n      }\n\n    //DOMに要素追加\n      //カメラ映像を出すvideoタグ\n        const video = document.getElementById(\"video\");\n      //ユーザーのカメラを取得する\n        const promise = navigator.mediaDevices.getUserMedia(medias);\n\n    //カメラの起動許可をするとコールバックしてvideoタグにカメラ映像を写す\n      promise.then(successCallback)\n        .catch(errorCallback);\n    //コールバックより実行しvideoオブジェクトにカメラ映像を格納する\n      function successCallback(stream) {\n        video.srcObject = stream;\n        };\n    //起動許可がされない時はアラート表示を行う\n        function errorCallback(err) {\n        alert(err);\n        };\n\n    //スタートボタンを待ちのボタンに変更を行う\n      button.className = \"spinner-border\";\n      button.innerHTML = \"\";\n\n    //使い方を非表示にする\n      instructions = document.getElementById(\"instructions\")\n      instructions.innerHTML = \"\"\n\n    //googleのteachablemachineを使用して画像解析をするのでモデル先のURLを格納\n      const URL = \"https://teachablemachine.withgoogle.com/models/w_phl0QcW/\";\n\n    //teachablemachineのモデルURLを読み込む\n      const modelURL = URL + \"model.json\";\n      const metadataURL = URL + \"metadata.json\";\n\n    //モデルのイメージを格納する\n      model = await tmImage.load(modelURL, metadataURL);\n    //フロント側に表示する結果ラベルをDOMに要素追加する\n      labelContainer = document.getElementById(\"label-container\");\n    //進捗インジケータを見えなくする\n      button.className = \"transparent-img\";\n    //画像を常に識別し結果を表示するためのループ処理\n      window.requestAnimationFrame(loop);\n    }\n\n\n  let baking_status = \"not_baked\"; //片面の焼きが完了したら反対側の焼きに移行するので、焼き加減の状態を追えるようにを変数を用意する\n  let endTime = 0; // 終了時間\n  let startTime = 0; // 開始時間\n  let cnt = 0;\n  let interval;\n\n  async function loop() {\n    await predict();\n    if (baking_status == \"baking_completed\"){\n      window.cancelAnimationFrame(loop);\n      first_baking_completed();\n    }else{\n      window.requestAnimationFrame(loop);\n    }\n  }\n\n  //カメラ画像からgoogleのteachablemachineのモデルより近い画像がどれか判定をしていく\n  async function predict(){\n  //canvasに静止画を格納する\n    var canvas =document.getElementById(\"canvas\")\n    canvas.getContext(\"2d\").drawImage(video, 0, 0, 200, 200)\n    const prediction = await model.predict(canvas);\n    //数値によってラベルの結果を変更する\n    //#{@user}はuserモデルのfavoriteカラム（焼き加減）の数値が入るようになっている\n    switch(true){\n      case prediction[0].probability.toFixed(2) * favorite_baking >= 0.7:\n        labelContainer.className = \"yureru-s\";\n        labelContainer.innerHTML = \"まだまだ\";\n        if (baking_status == \"not_baked\"){\n          startTime = performance.now();\n          baking_status = \"start_baking\";\n        }\n      break;\n      case prediction[1].probability.toFixed(2) * favorite_baking >= 0.2:\n        labelContainer.className = \"yureru-s\";\n        labelContainer.innerHTML = \"今だ\";\n        if (baking_status ==\"start_baking\"){\n          endTime = performance.now(); // 終了時間\n          //最初の焼きが完了すると『もう少し』から『今だ』にかかった時間を測定して次のステップに進ませる\n          baking_status = \"baking_completed\"\n        }\n      break;\n      case prediction[1].probability.toFixed(2) * favorite_baking >= 0.05:\n        labelContainer.className = \"yureru-s\";\n        labelContainer.innerHTML = \"もう少し\";\n      break;\n      case prediction[2].probability.toFixed(2) * favorite_baking > 0.2:\n        labelContainer.className = \"yureru-s\";\n        labelContainer.innerHTML = \"PerfectPancakes!!\";\n        break;\n      case prediction[3].probability.toFixed(2) * favorite_baking > 0.2:\n        labelContainer.className = \"yureru-s\";\n        labelContainer.innerHTML = \"パンケーキを映してください\"\n        break;\n    }\n  }\n\n  //反対側の焼きをスタートする為のボタンと新しいパンケーキを焼き直すボタンは必要な時以外は非表示にしておく\n  $(function() {\n    $('#second_step_box').hide(); //もう片面の焼きの目安時間のカウントを開始するボタン\n    $('#restart').hide(); //新しいパンケーキを作るためにリスタートするボタン\n  });\n\n  //次の焼き時間目安を表示させカウントダウンタイマーのボタンを表示させる\n  function first_baking_completed(){\n    $(\"#baking_time_result\").text(`片面の焼き時間は ${Math.round((endTime - startTime)/1000)}秒でした。次の焼き加減目安は ${Math.round((endTime - startTime) / 1000 * 0.5)}秒です。パンケーキをひっくり返したらスタートを押してください。`);\n    $(\"#second_step_box\").show();\n  }\n\n  //カウントダウンをスタートさせると1秒ごとにcountupを作動させる\n  $('#second_baking_button').on('click', function() {\n    $('#second_step_box').hide();\n    interval = setInterval(countup, 1000);\n  });\n  //タイマーを表示させて0になったら終了する\n  function countup(){\n    cnt++;\n    labelContainer.innerHTML = `2回目のひっくり返しまであと${Math.round((endTime - startTime) / 1000 * 0.5)-cnt}秒`;\n    if ((Math.round((endTime - startTime) / 1000 * 0.5)-cnt) <=0){\n      labelContainer.innerHTML = \"今だ\";\n      $('#restart').show();\n      //タイマーを終了\n      clearInterval(interval);\n    }\n  }\n\n  //ボタンの表示と変数のステータスを最初のスタートを押した状態と同じにする\n  $('#restart').on('click', function() {\n    $('#restart').hide();\n    //開始瞬間を一回のみにするためのmesurementをfalseにしておく\n    baking_status = \"not_baked\";\n    //開始時間と終了時間をリセット\n    endTime = 0;\n    startTime = 0;\n    //カウントダウン用の変数をリセット\n    cnt = 0;\n  window.requestAnimationFrame(loop);\n  });\n\n}\n\n"]},"metadata":{},"sourceType":"module"}